import jakarta.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.NoHandlerFoundException;
import org.springframework.validation.BindException;

public class GlobalExceptionHandlerController extends BaseController {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandlerController.class);

    @ExceptionHandler(value = Exception.class)
    Object handleException(Exception e, HttpServletRequest request) {
        logger.error("请求错误，请求地址:{},错误信息:", request.getRequestURL(), e);
        ResponseVO Response = new ResponseVO();
        if (e instanceof NoHandlerFoundException) {
            Response.setCode(ResponseCodeEnum.CODE_404.getCode());
            Response.setInfo(ResponseCodeEnum.CODE_404.getMsg());
            Response.setStatus(STATUS_ERROR);
        } else if (e instanceof BusinessException) { //业务错误
            BusinessException biz = (BusinessException) e;
            Response.setCode(biz.getCode());
            Response.setInfo(biz.getMessage());
            Response.setStatus(STATUS_ERROR);
        } else if (e instanceof BindException) { //参数类型错误
            Response.setCode(ResponseCodeEnum.CODE_600.getCode());
            Response.setInfo(ResponseCodeEnum.CODE_600.getMsg());
            Response.setStatus(STATUS_ERROR);
        } else if (e instanceof DuplicateKeyException) {//主键神突
            Response.setCode(ResponseCodeEnum.CODE_601.getCode());
            Response.setInfo(ResponseCodeEnum.CODE_601.getMsg());
            Response.setStatus(STATUS_ERROR);

        } else {
            Response.setCode(ResponseCodeEnum.CODE_500.getCode());
            Response.setInfo(ResponseCodeEnum.CODE_500.getMsg());
            Response.setStatus(STATUS_ERROR);
        }
        return Response;
    }
}